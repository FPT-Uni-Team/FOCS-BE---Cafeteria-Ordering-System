version: '3.7'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:5000"
    depends_on: 
      - redis
      - sqlserver
      - rabbitmq
    environment:
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=SEP490FOCS;User Id=sa;Password=Hxs03122003@@;Encrypt=False;TrustServerCertificate=True;
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5000
    volumes:
      - ./dataprotection-keys:/app/dataprotection-keys
    networks:
      - backend
    restart: always

  notificationservice:
    build:
      context: .
      dockerfile: FOCS.NotificationService/Dockerfile
    environment:
      - FIREBASE_CREDENTIALS=/app/firebase-service-account.json
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
    volumes:
      - /root/FOCS-BE---Cafeteria-Ordering-System/SEP490-FOCS/FOCS.NotificationService/firebase-service-account.json:/app/firebase-service-account.json:ro
    networks:
      - backend
    restart: always

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "Hxs03122003@@"
      ACCEPT_EULA: "Y"
    networks:
      - backend
    restart: always

  redis: 
    image: redis:7
    container_name: redis
    command: ["redis-server", "--appendonly", "yes", "--appendfsync", "everysec"]
    ports: 
      - "6379:6379"
    volumes:
      - ./redis-data:/data  
    networks:
      - backend
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  
      - "15672:15672" 
    networks:
      - backend
    restart: always

networks:
  backend:
    driver: bridge
